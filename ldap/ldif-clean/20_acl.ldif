#
# CAUTION: this file gas automatically generated running make.sh. Do not edit.
#
# ACL para el servidor LDAP
#
# Modificado de este fichero:
# https://github.com/osixia/docker-openldap/blob/master/image/service/slapd/assets/config/bootstrap/ldif/02-security.ldif
# 
# Se deja de leer con la primera línea en blanco, por lo que no debe haber ninguna.
#
dn: olcDatabase={1}mdb,cn=config
changetype: modify
replace: olcAccess
#
# Esto hace que el usuario root en Linux pueda gestionar absolutamente todo.
# Explicación de `by * break`:
#    - Todas las reglas olcAccess acaban con un `by * none` imlpícito en último lugar.
#    - Si dejamos `by * none`, ya no se seguirían procesando otras reglas olcAccess
#      porque esta primera abarca todo con `to *`.
#    - Por lo tanto `by * break` nos permite poner esta regla de root en primer lugar
#      y que se sigan leyendo otras reglas después.
olcAccess: to * 
           by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage 
           by * break
#
# Los alumnos no pueden enumerar usuarios pertenecientes a un grupo.
# NOTA: Esto impide la enumeración directa al servidor ldap (ej. ldapsearch), pero en los clientes tenemos
#       configurado SSSD, que debe de hacer la búsqueda con el root y aquí no lo podemos evitar.
#       Para SSSD además hay que poner `enumerate = false` en sssd.conf
olcAccess: to attrs=uniqueMember
           by group/groupOfUniqueNames/uniqueMember="cn=alumnos,ou=groups,dc=test,dc=tierno,dc=es" none
           by * read
#
# Únicamente los profesores pueden cambiar su password.
olcAccess: to attrs=userPassword,shadowLastChange 
           by group/groupOfUniqueNames/uniqueMember="cn=profesores,ou=groups,dc=test,dc=tierno,dc=es" write
           by self auth
           by anonymous auth 
           by * auth
#
# El usuario admin (creado por osixia/docker-openldap) puede modificar todo.
olcAccess: to * 
           by dn="cn=admin,dc=test,dc=tierno,dc=es" write 
           by * read






#
# GESTIÓN DE GRUPOS EN LDAP
#
# Hay al menos 3 formas de gestionar grupos den LDAP:
# https://unofficialaciguide.com/2019/07/31/ldap-schemas-for-aci-administrators-rfc2307-vs-rfc2307bis/
#
# 1. RFC2307: El tradicional para UNIX y va por defecto en openldap.
#    - Los usuarios van con `uid=user` (sin ou=...)
#    - Los grupos van con `cn=group,ou=...`
#    - Los grupos tienen `objectClass: posixGroup`. 
#    - Los grupos tienen una lista de usuarios con `memberUID: user`
#    - Los usuarios no tienen atributo de pertenencia a grupo. 
#      Esto oblica a consultar a todos los grupos para saber a cuáles pertenece un usuario.
#
# 2. RFC2307bis: el de Active Directory y el más extendido.
#    - Los usuarios van con `cn=user,ou=people,dc...`
#    - Los grupos van con `cn=group,ou=...`
#    - Los grupos tienen `objectClass: groupOfNames`. 
#    - Los grupos tienen lista de usuarios con `member: cn=user,ou=...`
#    - Los usuarios tienen atributo `memberOf: cn=group,ou=...`
#
# 3. RFC2307bis con groupOfUniqueNames: mezcla de ambos.
#    - Permite tener usuarios con `uid` en vez de `cn` 
#      a la vez qu los usuarios tienen atributo de pertenencia a grupo.
#    - Los usuarios van con `uid=user,ou=...`
#    - Los grupos tienen `objectClass: posixGroup` y `objectClass: groupOfUniqueNames`.
#    - Los grupos tienen lista de usuarios con `uniqueMember: uid=user,ou=...`
#    - Los usuarios tienen atributo `memberOf: cn=group,ou=...`
#
#
# Para poner reglas para usuarios pertenecientes a un grupo normalmente se usa:
#           by group.exact="cn=alumnos,ou=groups,dc=test,dc=tierno,dc=es" none
# pero esto no funciona con groupOfUniqueNames (ver explicación al final) porque
# group.exact utiliza el atributo `member`, y nosotros tenemos `uniqueMember`.
# Para que funcione debemos usar:
#           by group/groupOfUniqueNames/uniqueMember="cn=alumnos,ou=groups,dc=test,dc=tierno,dc=es" none
# Ver: 8.4.4. Managing access with Groups
# https://www.openldap.org/doc/admin24/access-control.html
#
